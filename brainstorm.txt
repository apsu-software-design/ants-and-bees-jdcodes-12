===== TDL =====
1) Fully document appropriately
2) Fill out README.md
3) Create pull request


===== Ants =====
1) Different types of Ants, each with different attributes/roles
2) Armor - determines how many stings an ant can take before retreating
3) Boosts - power-ups for Ants
4) Throw leaves at bees to attack them
5) Queen lives off to the left
6) Marked in tunnels by their corresponding letter

~ Types ~
1) Grower (G) - grow food & boosts. Either produce 1 food for colony or occasionally a boost.
	-> Cost 1 food, has 1 Armor

2) Thrower (T) - throw leaves at bees. Throws 1 leaf at closest bee within range.
	-> throw differnt leaves when boosted
	-> Cost 4 food, has 1 Armor

3) Eater (E) - Eats the bee, 3 turns to eat the bee.
	-> 3 turn recharge to eat again
	-> If damaged or retreats, can cough up Bee.
	-> cost 4 food, has 1 Armor

4) Scuba (S) - Throw leaves at the Bees, can live under water. 
	-> Cost 5 food, have 1 armor.

5) Guard (_) - protect other ants, same tunnel as the guard.
	-> only time more than 1 ant per tunnel
	-> Take hits for other ants.
	-> Cost 4 food, have 2 armor.
	-> Shown on board as underlines under ants they are protecting.
	-> If NOT protecting an Ant, shown as an X in tunnel.


===== Bees =====
1) Fly down tunnels to attack queen
2) If ant blocks path, Bee attacks ant until ant retreats
3) Continue to spawn in waves, until Hive is empty
4) Represented by yellow "B" with a number (i.e. B2, B3, B4)
5) Numbers by the B indicated how many Bees are in that tunnel, since there can be more than one Bee in a single tunnel

===== Colony =====
1) Ants live here
2) divided into sections ("row, col")
3) Only one Ant in a tunnel at a time
4) Has food stock, used to breed & deploy Ants
5) Has boosts (special power-up leaves)
6) Tunnels can have other properties (i.e. being flooded, etc.)
7) Flooded tunnels make it impassable for Ants

===== Game =====
1) Played on the command line
2) turn-based
3) player can deploy ants into tunnel (as long as enough food)
4) One finished deploying ants (turn is over)
5) On end turn, all insects perform their actions (ants, then bees)
6) ants throw leaves at bees
7) bees sting ants
8) THEN special environment events occur from tunnel
9) After environment events, new bees arrive from hive to start next turn
10) LOSE GAME - if bees attack queen
11) WIN GAME - if all bees eliminated 

~ Game Flow ~
1) Bees arrive
2) Player dploys ants, ends turn
3) end of turn action order [ants, bees, tunnel, bee wave to start next round]

===== Boosts =====
1) FlyingLeaf - Can be thrown further
2) StickyLeaf - Immobilize Bee in spider web, until next turn
3) IcyLeaf - Prevent a Bee from Stinging an Ant
4) BugSpray - Deal damage to every insct in current tunnel (including Ant who activated it)

===== Commands =====
1) deploy AntType Tunnel |> deploys Ant of type X to a tunnel section (if enough food)
2) remove tunnel |> removes ant from particular tunnel
3) boost Boost tunnel |> give boost resource to ant in specified tunnel (if there is boost, and Ant present)
4) turn - ends turn; ants act, bees act, tunnel act, new bees invade, next turn start
5) show - display board
6) help [command] - show command description
7) help - list all Commands
8) exit - quit program (or hit ctrl-c x2)


===== Comment Types =====
1) API Comments
	-> Added to all classes, and those PUBLIC class methods
	-> Only document methods that are longer than 4 lines (i.e. no need to document getters/setters)
	-> Use TypeDoc to create the documentation
	-> Use supported JavaDoc tags to describe the parameters & returned values of functions (e.g. on functions not self-documenting)
	-> Use TypDoc to generate the HTML renderings of the comments:
		a) Output documentation in /docs folder
		b) use minimal theme
		c) make sure external definition files are not also documented (--excludeExternals flag)
		d) use --ignoreCompileErrors flag to get around the @types issue
	-> Generate documentation reguarly to see that it is producing good effective/readable output.
	-> docs/ folder should be tracked under VCS

2) Summarizing Comments
	-> Added to "complex" algorithms that occur in methods (i.e. 1+ loops, multiple steps within a single loop, etc.)
	-> Anything that isn't slef-explanatory
	-> Focuses on "How" th eprogram works
	-> Summarize chunks of behavior (e.g. what is loop doing?)
	-> should raise the level of abstraction

3) Comment the use of external libriaries (e.g. vorpral).
	-> One-comment per line model (to show you read the documentation)
	-> Not, "calls method X with parameter Y")
	-> Need to look up the libraries and read their APIs

==== Questions/Thoughts ====
1) How do I use TypeDoc?
2) How do I install TypeDoc?
3) What is TypeDoc?
4) What is self-documenting method?
5) What is JavaDoc tags for parameters & return values of a function?
6) What is Vorpal?
7) What are the external libraries being used here?